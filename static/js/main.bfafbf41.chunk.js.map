{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/CounterButton.js","components/Header.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","console","log","map","user","i","key","SearchBox","searchfield","searchChange","aria-label","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","CounterButton","updateCount","setState","state","count","nextProps","nextState","this","color","onClick","Component","Header","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRbots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","error","dispatch","event","payload","target","value","fetch","then","reponse","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","intialStateSearch","intialStateRobots","rootReducer","createLogger","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.bfafbf41.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n\treturn (\r\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t\t<img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t\t);\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n\t// if (true) {\r\n\t// \tthrow new Error('NOOOOOO!');\r\n\t// }\r\n\tconsole.log('CardList')\r\n\treturn (\r\n\t\t<div>\r\n\t\t{robots.map((user, i) => {\r\n\t\t\treturn (\r\n\t\t\t<Card \r\n\t\t\tkey={i} \r\n\t\t\tid={robots[i].id} \r\n\t\t\tname={robots[i].name} \r\n\t\t\temail={robots[i].email}/>\r\n\t\t\t);\r\n\t})}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n\tconsole.log('SearchBox')\r\n\treturn (\r\n\t\t<div className='pa2'>\r\n\t\t\t<input \r\n\t\t\taria-label='Search Robots'\r\n\t\t\tclassName = 'pa3 ba b-- green bg-lightest-blue'\r\n\t\t\ttype = 'search' \r\n\t\t\tplaceholder='search robots' \r\n\t\t\tonChange={searchChange}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\t// console.log(props);\r\n\treturn (\r\n\t\t<div style={{ overflowY: 'scroll', border: '5px solid black', height: '500px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t\t);\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass CounterButton extends Component {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\tcount: 0\r\n\t\t}\r\n\t}\r\n\r\n\tshouldComponentUpdate(nextProps, nextState) {\r\n\t\tif (this.state.count !== nextState.count) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tupdateCount = () => {\r\n\t\tthis.setState(state =>  {\r\n\t\t\treturn { count: state.count +1} \r\n\t\t\t})\r\n\t}\r\n\r\n\trender() {\r\n\t\tconsole.log('CounterButton')\r\n\t\treturn (\r\n\t\t\t<button color={this.props.color} onClick={this.updateCount}>\r\n\t\t\tCount: {this.state.count}\r\n\t\t\t</button>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default CounterButton;","import React, { Component } from 'react';\r\nimport CounterButton from './CounterButton';\r\n\r\nclass Header extends Component {\r\n\t// shouldComponentUpdate(nextProps, nextState) {\r\n\t// \treturn false;\r\n\t// }\r\n\r\n\trender() {\r\n\t\tconsole.log('Header')\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t<h1 className='f1'>RoboFriends</h1>\r\n\t\t\t<CounterButton color={'red'} />\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\n// import ErrorBoundry from '../components/ErrorBoundry';\r\nimport './App.css';\r\n\r\nimport { setSearchField, requestRobots } from '../actions';\r\nimport Header from '../components/Header';\r\n\r\nconst mapStateToProps = (state) => {\r\n\treturn {\r\n\t\tsearchField: state.searchRobots.searchField,\r\n\t\trobots: state.requestRobots.robots,\r\n\t\tisPending: state.requestRobots.isPending,\r\n\t\terror: state.requestRobots.error\r\n\t}\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\tonSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n\t\tonRequestRobots: () => dispatch(requestRobots())\r\n\t}\r\n}\r\n\r\n\tclass App extends Component {\r\n\tcomponentDidMount() {\r\n\t\tthis.props.onRequestRobots();\r\n\t}\r\n\r\n\t\trender() {\r\n\t\tconst { searchField, onSearchChange, robots, isPending } = this.props;\r\n\t\tconst filteredRbots = robots.filter(robot =>{\r\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n\t\t\t})\r\n\t\t\t\treturn isPending ?\r\n\t\t\t\t<h1>Loading</h1> :\r\n\t\t\t\t(\r\n\t\t<div className ='tc'>\r\n\t\t\t<Header />\r\n\t\t\t<SearchBox searchChange={onSearchChange}/>\r\n\t\t\t<Scroll>\r\n\r\n\t\t\t<CardList robots = { filteredRbots }/>\r\n\r\n\t\t\t</Scroll>\r\n\t\t</div>\r\n\t);\r\n\t\t}\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \r\n\tCHANGE_SEARCH_FIELD ,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED\r\n} from './constants.js'\r\n\r\nexport const setSearchField = (text) => ({\r\n\ttype: CHANGE_SEARCH_FIELD,\r\n\tpayload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n\tdispatch({ type: REQUEST_ROBOTS_PENDING})\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t\t.then(reponse=>\treponse.json())\r\n\t\t\t.then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n\t\t\t.catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error}))\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANCE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { \r\n\tCHANGE_SEARCH_FIELD ,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED\r\n} from './constants.js'\r\n\r\nconst intialStateSearch = {\r\n\tsearchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=intialStateSearch, action={}) => {\r\n\tswitch (action.type) {\r\n\t\tcase CHANGE_SEARCH_FIELD:\r\n\t\t\treturn Object.assign({}, state, {searchField: action.payload});\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n} \r\n\r\nconst intialStateRobots = {\r\n\tisPending: false,\r\n\trobots: [],\r\n\terror: ''\r\n}\r\n\r\nexport const requestRobots = (state=intialStateRobots, action={}) => {\r\n\tswitch(action.type) {\r\n\t\tcase REQUEST_ROBOTS_PENDING:\r\n\t\t\treturn Object.assign({}, state, { isPending: true})\r\n\t\tcase REQUEST_ROBOTS_SUCCESS:\r\n\t\t\treturn Object.assign({}, state, { robots: action.payload, isPending: false})\r\n\t\tcase REQUEST_ROBOTS_FAILED:\r\n\t\t\treturn Object.assign({}, state, { error: action.payload, isPending: false})\r\n\t\t\tdefault:\r\n\t\t\t\treturn state;\r\n\t}\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport { createLogger } from 'redux-logger';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { searchRobots, requestRobots } from './reducers';\r\nimport 'tachyons';\r\n\r\nconst logger = createLogger();\r\n\r\nconst rootReducer = combineReducers({ searchRobots, requestRobots })\r\nconst store = \r\ncreateStore(rootReducer, applyMiddleware(thunkMiddleware))\r\n\r\nReactDOM.render(\r\n\t<Provider store={store}>\r\n\t<App />\r\n\t</Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}